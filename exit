= ..ccrreeaattee

(from gem actionpack-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  RReessppoonnssee
------------------------------------------------------------------------
  create(status = 200, header = {}, body = [], default_headers: self.default_headers)

------------------------------------------------------------------------


(from gem actionpack-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  TTeessttRReeqquueesstt
------------------------------------------------------------------------
  create(env = {})

------------------------------------------------------------------------

Create a new test request with default env values.


(from gem actionview-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  NNooddee
------------------------------------------------------------------------
  create(name, logical_name, template, partial)

------------------------------------------------------------------------


(from gem activerecord-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  CCoolllleeccttiioonnPPrrooxxyy
------------------------------------------------------------------------
  create(attributes = {}, &block)

------------------------------------------------------------------------

Returns a new object of the collection type that has been instantiated
with attributes, linked to this object and that has already been saved
(if it passes the validations).

  class Person
    has_many :pets
  end

  person.pets.create(name: 'Fancy-Fancy')
  # => #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>

  person.pets.create([{name: 'Spook'}, {name: 'Choo-Choo'}])
  # => [
  #      #<Pet id: 2, name: "Spook", person_id: 1>,
  #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>
  #    ]

  person.pets.size  # => 3
  person.pets.count # => 3

  person.pets.find(1, 2, 3)
  # => [
  #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
  #       #<Pet id: 2, name: "Spook", person_id: 1>,
  #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
  #    ]


(from gem activerecord-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  DDaattaabbaasseeSSttaatteemmeennttss
------------------------------------------------------------------------
  create(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])

------------------------------------------------------------------------

(This method is an alias for
ActiveRecord::ConnectionAdapters::DatabaseStatements#insert.)

Executes an INSERT query and returns the new record's ID

id_value will be returned unless the value is nil, in which case the
database will attempt to calculate the last inserted id and return that
value.

If the next id was calculated in advance (as in Oracle), it should be
passed in as id_value.


(from gem activerecord-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  CCllaassssMMeetthhooddss
------------------------------------------------------------------------
  create(attributes = nil, &block)

------------------------------------------------------------------------

Creates an object (or multiple objects) and saves it to the database, if
validations pass. The resulting object is returned whether the object
was saved successfully to the database or not.

The attributes parameter can be either a Hash or an Array of Hashes.
These Hashes describe the attributes on the objects that are to be
created.

==== EExxaammpplleess
  # Create a single new object
  User.create(first_name: 'Jamie')

  # Create an Array of new objects
  User.create([{ first_name: 'Jamie' }, { first_name: 'Jeremy' }])

  # Create a single object and pass it into a block to set other attributes.
  User.create(first_name: 'Jamie') do |u|
    u.is_admin = false
  end

  # Creating an Array of new objects using a block, where the block is executed for each object:
  User.create([{ first_name: 'Jamie' }, { first_name: 'Jeremy' }]) do |u|
    u.is_admin = false
  end


(from gem activerecord-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  RReellaattiioonn
------------------------------------------------------------------------
  create(attributes = nil, &block)

------------------------------------------------------------------------

Tries to create a new record with the same scoped attributes defined in
the relation. Returns the initialized object if validation fails.

Expects arguments in the same format as
{ActiveRecord::Base.create}[rdoc-ref:Persistence::ClassMethods#create].

==== EExxaammpplleess

  users = User.where(name: 'Oscar')
  users.create # => #<User id: 3, name: "Oscar", ...>

  users.create(name: 'fxn')
  users.create # => #<User id: 4, name: "fxn", ...>

  users.create { |user| user.name = 'tenderlove' }
  # => #<User id: 5, name: "tenderlove", ...>

  users.create(name: nil) # validation on name
  # => #<User id: nil, name: nil, ...>


(from gem activerecord-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  DDaattaabbaasseeTTaasskkss
------------------------------------------------------------------------
  create(configuration, *arguments)

------------------------------------------------------------------------


(from gem activesupport-7.0.2.2)
=== IImmpplleemmeennttaattiioonn  ffrroomm  TTiimmeeZZoonnee
------------------------------------------------------------------------
  create(name)

------------------------------------------------------------------------

(This method is an alias for ActiveSupport::TimeZone::new.)

Create a new TimeZone object with the given name and offset. The offset
is the number of seconds that this time zone is offset from UTC (GMT).
Seconds were chosen as the offset unit because that is the unit that
Ruby uses to represent time zone offsets (see Time#utc_offset).


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  CCSSttrruuccttBBuuiillddeerr
------------------------------------------------------------------------
  create(klass, types, members)

------------------------------------------------------------------------

Construct a new class given a C:
* class klass (CUnion, CStruct, or other that provide an #entity_class)
* types (Fiddle::TYPE_INT, Fiddle::TYPE_SIZE_T, etc., see the C types
  constants)
* corresponding members

Fiddle::Importer#struct and Fiddle::Importer#union wrap this
functionality in an easy-to-use manner.

Examples:

  require 'fiddle/struct'
  require 'fiddle/cparser'

  include Fiddle::CParser

  types, members = parse_struct_signature(['int i','char c'])

  MyStruct = Fiddle::CStructBuilder.create(Fiddle::CUnion, types, members)

  MyStruct.malloc(Fiddle::RUBY_FREE) do |obj|
    ...
  end

  obj = MyStruct.malloc(Fiddle::RUBY_FREE)
  begin
    ...
  ensure
    obj.call_free
  end

  obj = MyStruct.malloc
  begin
    ...
  ensure
    Fiddle.free obj.to_ptr
  end


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  CCSSttrruuccttBBuuiillddeerr
------------------------------------------------------------------------
  create(klass, types, members)

------------------------------------------------------------------------

Construct a new class given a C:
* class klass (CUnion, CStruct, or other that provide an #entity_class)
* types (Fiddle::TYPE_INT, Fiddle::TYPE_SIZE_T, etc., see the C types
  constants)
* corresponding members

Fiddle::Importer#struct and Fiddle::Importer#union wrap this
functionality in an easy-to-use manner.

Examples:

  require 'fiddle/struct'
  require 'fiddle/cparser'

  include Fiddle::CParser

  types, members = parse_struct_signature(['int i','char c'])

  MyStruct = Fiddle::CStructBuilder.create(Fiddle::CUnion, types, members)

  MyStruct.malloc(Fiddle::RUBY_FREE) do |obj|
    ...
  end

  obj = MyStruct.malloc(Fiddle::RUBY_FREE)
  begin
    ...
  ensure
    obj.call_free
  end

  obj = MyStruct.malloc
  begin
    ...
  ensure
    Fiddle.free obj.to_ptr
  end


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  NNooAAlliiaassYYAAMMLLTTrreeee
------------------------------------------------------------------------
  create()

------------------------------------------------------------------------


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  RReeqquuiirreemmeenntt
------------------------------------------------------------------------
  create(*inputs)

------------------------------------------------------------------------

Factory method to create a Gem::Requirement object.  Input may be a
Version, a String, or nil.  Intended to simplify client code.

If the input is "weird", the default version requirement is returned.


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  VVeerrssiioonn
------------------------------------------------------------------------
  create(input)

------------------------------------------------------------------------

Factory method to create a Version object. Input may be a Version or a
String. Intended to simplify client code.

  ver1 = Version.create('1.3.17')   # -> (Version object)
  ver2 = Version.create(ver1)       # -> (ver1)
  ver3 = Version.create(nil)        # -> nil


(from gem globalid-1.0.0)
=== IImmpplleemmeennttaattiioonn  ffrroomm  GGlloobbaallIIDD
------------------------------------------------------------------------
  create(model, options = {})

------------------------------------------------------------------------


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  RReessppoonnssee
------------------------------------------------------------------------
  OpenSSL::OCSP::Response.create(status, basic_response = nil) -> response

------------------------------------------------------------------------

Creates an OpenSSL::OCSP::Response from _s_t_a_t_u_s and
_b_a_s_i_c___r_e_s_p_o_n_s_e.


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  PPKKCCSS1122
------------------------------------------------------------------------
  PKCS12.create(pass, name, key, cert [, ca, [, key_pbe [, cert_pbe [, key_iter [, mac_iter [, keytype]]]]]])

------------------------------------------------------------------------

=== PPaarraammeetteerrss
* _p_a_s_s - string
* _n_a_m_e - A string describing the key.
* _k_e_y - Any PKey.
* _c_e_r_t - A X509::Certificate.
  * The public_key portion of the certificate must contain a valid
    public key.
  * The not_before and not_after fields must be filled in.
* _c_a - An optional array of X509::Certificate's.
* _k_e_y___p_b_e - string
* _c_e_r_t___p_b_e - string
* _k_e_y___i_t_e_r - integer
* _m_a_c___i_t_e_r - integer
* _k_e_y_t_y_p_e - An integer representing an MSIE specific
  extension.

Any optional arguments may be supplied as nil to preserve the OpenSSL
defaults.

See the OpenSSL documentation for PKCS12_create().


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  JJSSOONNTTrreeee
------------------------------------------------------------------------
  create(options = {})

------------------------------------------------------------------------


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  TTooRRuubbyy
------------------------------------------------------------------------
  create(symbolize_names: false, freeze: false)

------------------------------------------------------------------------


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  YYAAMMLLTTrreeee
------------------------------------------------------------------------
  create(options = {})

------------------------------------------------------------------------


(from gem rspec-core-3.5.4)
=== IImmpplleemmeennttaattiioonn  ffrroomm  EExxaammpplleeGGrroouuppHHaasshh
------------------------------------------------------------------------
  create(parent_group_metadata, user_metadata, example_group_index, *args, &block)

------------------------------------------------------------------------


(from gem rspec-core-3.5.4)
=== IImmpplleemmeennttaattiioonn  ffrroomm  EExxaammpplleeHHaasshh
------------------------------------------------------------------------
  create(group_metadata, user_metadata, index_provider, description, block)

------------------------------------------------------------------------


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  NNaammee
------------------------------------------------------------------------
  create(arg)

------------------------------------------------------------------------

Creates a new DNS name from arg.  arg can be:

Name:
  returns arg.

String:
  Creates a new Name.



(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  IIPPvv44
------------------------------------------------------------------------
  create(arg)

------------------------------------------------------------------------


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  IIPPvv66
------------------------------------------------------------------------
  create(arg)

------------------------------------------------------------------------

Creates a new IPv6 address from arg which may be:

IPv6:
  returns arg.

String:
  arg must match one of the IPv6::Regex* constants



(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  AAlltt
------------------------------------------------------------------------
  create(arg)

------------------------------------------------------------------------

Creates a new LOC::Alt from arg which may be:

LOC::Alt:
  returns arg.

String:
  arg must match the LOC::Alt::Regex constant



(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  CCoooorrdd
------------------------------------------------------------------------
  create(arg)

------------------------------------------------------------------------

Creates a new LOC::Coord from arg which may be:

LOC::Coord:
  returns arg.

String:
  arg must match the LOC::Coord::Regex constant



(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  SSiizzee
------------------------------------------------------------------------
  create(arg)

------------------------------------------------------------------------

Creates a new LOC::Size from arg which may be:

LOC::Size:
  returns arg.

String:
  arg must match the LOC::Size::Regex constant



(from gem tzinfo-2.0.4)
=== IImmpplleemmeennttaattiioonn  ffrroomm  TTiimmeessttaammpp
------------------------------------------------------------------------
  create(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, sub_second = 0, utc_offset = nil)

------------------------------------------------------------------------

Returns a new {Timestamp} representing the (Gregorian calendar) date and
time specified by the supplied parameters.

If `utc_offset` is `nil`, `:utc` or 0, the date and time parameters will
be interpreted as representing a UTC date and time. Otherwise the date
and time parameters will be interpreted as a local date and time with
the given offset.

@param year [Integer] the year. @param month [Integer] the month (1-12).
@param day [Integer] the day of the month (1-31). @param hour [Integer]
the hour (0-23). @param minute [Integer] the minute (0-59). @param
second [Integer] the second (0-59). @param sub_second [Numeric] the
fractional part of the second as either
  a `Rational` that is greater than or equal to 0 and less than 1, or
  the `Integer` 0.

@param utc_offset [Object] either `nil` for a {Timestamp} without a
  specified offset, an offset from UTC specified as an `Integer` number
  of seconds or the `Symbol` `:utc`).

@return [Timestamp] a new {Timestamp} representing the specified
  (Gregorian calendar) date and time.

@raise [ArgumentError] if either of `year`, `month`, `day`, `hour`,
  `minute`, or `second` is not an `Integer`.

@raise [ArgumentError] if `sub_second` is not a `Rational`, or the
  `Integer` 0.

@raise [ArgumentError] if `utc_offset` is not `nil`, not an `Integer`
  and not the `Symbol` `:utc`.

@raise [RangeError] if `month` is not between 1 and 12. @raise
[RangeError] if `day` is not between 1 and 31. @raise [RangeError] if
`hour` is not between 0 and 23. @raise [RangeError] if `minute` is not
between 0 and 59. @raise [RangeError] if `second` is not between 0 and
59. @raise [RangeError] if `sub_second` is a `Rational` but that is less
  than 0 or greater than or equal to 1.


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  TTeemmppffiillee
------------------------------------------------------------------------
  create(basename="", tmpdir=nil, mode: 0, **options) { |tmpfile| ... }

------------------------------------------------------------------------

Creates a temporary file as a usual File object (not a Tempfile). It
does not use finalizer and delegation, which makes it more efficient and
reliable.

If no block is given, this is similar to Tempfile.new except creating
File instead of Tempfile. In that case, the created file is not removed
automatically. You should use File.unlink to remove it.

If a block is given, then a File object will be constructed, and the
block is invoked with the object as the argument. The File object will
be automatically closed and the temporary file is removed after the
block terminates, releasing all resources that the block created. The
call returns the value of the block.

In any case, all arguments (basename, tmpdir, mode, and **options) will
be treated the same as for Tempfile.new.

  Tempfile.create('foo', '/home/temp') do |f|
     # ... do something with f ...
  end


(from gem globalid-1.0.0)
=== IImmpplleemmeennttaattiioonn  ffrroomm  GGIIDD
------------------------------------------------------------------------
  create(app, model, params = nil)

------------------------------------------------------------------------

Shorthand to build a URI::GID from an app, a model and optional params.

  URI::GID.create('bcx', Person.find(5), database: 'superhumans')


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  RReeggiissttrryy
------------------------------------------------------------------------
  create(hkey, subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED) { |obj| ... }

------------------------------------------------------------------------

--- Registry.create(key, subkey, desired = KEY_ALL_ACCESS, opt =
REG_OPTION_RESERVED)

--- Registry.create(key, subkey, desired = KEY_ALL_ACCESS, opt =
REG_OPTION_RESERVED) { |reg| ... }

Create or open the registry key subkey under key. You can use predefined
key HKEY_* (see Constants)

If subkey is already exists, key is opened and Registry#created? method
will return false.

If block is given, the key is closed automatically.


(from ruby core)
=== IImmpplleemmeennttaattiioonn  ffrroomm  RReeggiissttrryy
------------------------------------------------------------------------
  create(subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED, &blk)

------------------------------------------------------------------------

Same as Win32::Registry.create (self, subkey, desired, opt)


